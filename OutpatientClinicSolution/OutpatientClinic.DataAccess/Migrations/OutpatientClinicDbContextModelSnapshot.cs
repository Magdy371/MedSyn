// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutpatientClinic.DataAccess.Context;

#nullable disable

namespace OutpatientClinic.DataAccess.Migrations
{
    [DbContext(typeof(OutpatientClinicDbContext))]
    partial class OutpatientClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "380c2017-1989-45f1-a87d-00d85ca6a182",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c20f7cea-5409-4225-8adb-7d086da01aaf",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "3fde6ca3-bb78-44d1-9aaf-5f11acb6d923",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        },
                        new
                        {
                            Id = "652851bf-b069-4a81-b939-3b629cd1a5eb",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "56dce52e-61b1-471a-a289-ac957bbaa8e2",
                            Name = "Technical_Support",
                            NormalizedName = "TECHNICAL_SUPPORT"
                        },
                        new
                        {
                            Id = "3343f39a-3faf-4b42-ad80-e978229d57e1",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "f63bc467-2c60-4c4f-9d28-9898a7179eb2",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("ClinicID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCA2E6C3C030");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex(new[] { "AppointmentDateTime" }, "IX_Appointments_DateTime");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Billing", b =>
                {
                    b.Property<int>("BillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BillingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("InsuranceCoverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BillingId")
                        .HasName("PK__Billing__F1656D1317CDA8A3");

                    b.HasIndex(new[] { "AppointmentId" }, "IX_Billing_AppointmentID");

                    b.HasIndex(new[] { "PatientId" }, "IX_Billing_PatientID");

                    b.HasIndex(new[] { "PaymentStatus" }, "IX_Billing_PaymentStatus");

                    b.ToTable("Billing", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClinicID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ClinicId")
                        .HasName("PK__Clinics__3347C2FDCF7CE5D9");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.ContactInfo", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ContactId")
                        .HasName("PK__ContactI__5C6625BBA84CC8E1");

                    b.HasIndex(new[] { "Email" }, "UQ__ContactI__A9D105343C41FAFD")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("ContactInfo", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.DeliveryNote", b =>
                {
                    b.Property<int>("DeliveryNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryNoteId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("FacilityID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("ReceivedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DeliveryNoteId")
                        .HasName("PK__Delivery__2A1CDD7E87E9E1FA");

                    b.HasIndex("FacilityId");

                    b.HasIndex(new[] { "OrderId" }, "IX_DeliveryNote_OrderID");

                    b.ToTable("DeliveryNote", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.DeliveryNoteDetail", b =>
                {
                    b.Property<int>("DeliveryDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryDetailId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeliveryNoteId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryNoteID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int>("QuantityDelivered")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DeliveryDetailId")
                        .HasName("PK__Delivery__EFD2C287E16C026E");

                    b.HasIndex("DeliveryNoteId");

                    b.HasIndex("ItemId");

                    b.ToTable("DeliveryNoteDetails");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DepartmentId")
                        .HasName("PK__Departme__B2079BCD3678F47F");

                    b.HasIndex(new[] { "DepartmentName" }, "UQ__Departme__D949CC3420EBFA09")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctors__2DC00EDFCF437B0A");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Doctors_DepartmentID");

                    b.HasIndex(new[] { "LicenseNumber" }, "UQ__Doctors__E88901663FC5012E")
                        .IsUnique()
                        .HasFilter("[LicenseNumber] IS NOT NULL");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FacilityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FacilityId")
                        .HasName("PK__Facility__5FB08B94472946F9");

                    b.HasIndex("ContactId");

                    b.ToTable("Facility", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("InsuranceId")
                        .HasName("PK__Insuranc__74231BC423DEEA1E");

                    b.HasIndex(new[] { "PatientId" }, "IX_Insurance_PatientID");

                    b.HasIndex(new[] { "PolicyNumber" }, "UQ__Insuranc__46DA01573CC12683")
                        .IsUnique();

                    b.ToTable("Insurance", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Inventory", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("FacilityID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("LastRestocked")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ItemId")
                        .HasName("PK__Inventor__727E83EB1BE9BB16");

                    b.HasIndex("FacilityId");

                    b.HasIndex(new[] { "ItemName" }, "IX_Inventory_ItemName");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.LabTest", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("TestDate")
                        .HasColumnType("date");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TestId")
                        .HasName("PK__LabTests__8CC33100C43F40D0");

                    b.HasIndex(new[] { "AppointmentId" }, "IX_LabTests_AppointmentID");

                    b.HasIndex(new[] { "PatientId" }, "IX_LabTests_PatientID");

                    b.ToTable("LabTests");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RecordId")
                        .HasName("PK__MedicalR__FBDF78C9408CB1F9");

                    b.HasIndex(new[] { "AppointmentId" }, "UQ__MedicalR__8ECDFCA34135F362")
                        .IsUnique()
                        .HasFilter("[AppointmentID] IS NOT NULL");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PrimaryDoctorId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryDoctorID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__970EC34675504678");

                    b.HasIndex(new[] { "ContactId" }, "IX_Patients_ContactID");

                    b.HasIndex(new[] { "LastName", "FirstName" }, "IX_Patients_Name");

                    b.HasIndex(new[] { "PrimaryDoctorId" }, "IX_Patients_PrimaryDoctorID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MedicalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PrescriptionId")
                        .HasName("PK__Prescrip__40130812F4CDA569");

                    b.HasIndex("RecordId");

                    b.HasIndex(new[] { "MedicalName" }, "IX_Prescriptions_MedicalName");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__96D4AAF719817DB0");

                    b.HasIndex(new[] { "ContactId" }, "IX_Staff_ContactID");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SupplierId")
                        .HasName("PK__Supplier__4BE66694F74E0005");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.SupplierOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("ExpectedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("FacilityID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderId")
                        .HasName("PK__Supplier__C3905BAF90D0822A");

                    b.HasIndex("FacilityId");

                    b.HasIndex("SupplierId");

                    b.HasIndex(new[] { "Status" }, "IX_SupplierOrder_Status");

                    b.ToTable("SupplierOrder", (string)null);
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.SupplierOrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__Supplier__D3B9D30C62611F41");

                    b.HasIndex("ItemId");

                    b.HasIndex(new[] { "OrderId" }, "IX_SupplierOrderDetails_OrderID");

                    b.ToTable("SupplierOrderDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutpatientClinic.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Appointment", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Clini__4AB81AF0");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__Appointme__Docto__49C3F6B7");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Patie__48CFD27E");

                    b.Navigation("Clinic");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Billing", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Appointment", "Appointment")
                        .WithMany("Billings")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__Billing__Appoint__17F790F9");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("Billings")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__Billing__Patient__17036CC0");

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.DeliveryNote", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Facility", "Facility")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK__DeliveryN__Facil__7D439ABD");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.SupplierOrder", "Order")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__DeliveryN__Order__7C4F7684");

                    b.Navigation("Facility");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.DeliveryNoteDetail", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.DeliveryNote", "DeliveryNote")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("DeliveryNoteId")
                        .HasConstraintName("FK__DeliveryN__Deliv__02FC7413");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Inventory", "Item")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__DeliveryN__ItemI__03F0984C");

                    b.Navigation("DeliveryNote");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Doctor", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK__Doctors__Departm__3E52440B");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Staff", "DoctorNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("OutpatientClinic.DataAccess.Entities.Doctor", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Doctors__DoctorI__3D5E1FD2");

                    b.Navigation("Department");

                    b.Navigation("DoctorNavigation");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Facility", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.ContactInfo", "Contact")
                        .WithMany("Facilities")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK__Facility__Contac__5DCAEF64");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Insurance", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("Insurances")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__Insurance__Patie__114A936A");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Inventory", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Facility", "Facility")
                        .WithMany("Inventories")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK__Inventory__Facil__6383C8BA");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.LabTest", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Appointment", "Appointment")
                        .WithMany("LabTests")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__LabTests__Appoin__0A9D95DB");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("LabTests")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__LabTests__Patien__09A971A2");

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.MedicalRecord", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Appointment", "Appointment")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("OutpatientClinic.DataAccess.Entities.MedicalRecord", "AppointmentId")
                        .HasConstraintName("FK__MedicalRe__Appoi__52593CB8");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Patient", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.ContactInfo", "Contact")
                        .WithMany("Patients")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK__Patients__Contac__4222D4EF");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Doctor", "PrimaryDoctor")
                        .WithMany("Patients")
                        .HasForeignKey("PrimaryDoctorId")
                        .HasConstraintName("FK__Patients__Primar__4316F928");

                    b.Navigation("Contact");

                    b.Navigation("PrimaryDoctor");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Prescription", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.MedicalRecord", "Record")
                        .WithMany("Prescriptions")
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__Prescript__Recor__5812160E");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Staff", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.ContactInfo", "Contact")
                        .WithMany("Staff")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK__Staff__ContactID__36B12243");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.SupplierOrder", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Facility", "Facility")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK__SupplierO__Facil__6EF57B66");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.Supplier", "Supplier")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__SupplierO__Suppl__6E01572D");

                    b.Navigation("Facility");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.SupplierOrderDetail", b =>
                {
                    b.HasOne("OutpatientClinic.DataAccess.Entities.Inventory", "Item")
                        .WithMany("SupplierOrderDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__SupplierO__ItemI__76969D2E");

                    b.HasOne("OutpatientClinic.DataAccess.Entities.SupplierOrder", "Order")
                        .WithMany("SupplierOrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__SupplierO__Order__75A278F5");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Appointment", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("LabTests");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Clinic", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.ContactInfo", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Patients");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.DeliveryNote", b =>
                {
                    b.Navigation("DeliveryNoteDetails");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Facility", b =>
                {
                    b.Navigation("DeliveryNotes");

                    b.Navigation("Inventories");

                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Inventory", b =>
                {
                    b.Navigation("DeliveryNoteDetails");

                    b.Navigation("SupplierOrderDetails");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.MedicalRecord", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Billings");

                    b.Navigation("Insurances");

                    b.Navigation("LabTests");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Staff", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("OutpatientClinic.DataAccess.Entities.SupplierOrder", b =>
                {
                    b.Navigation("DeliveryNotes");

                    b.Navigation("SupplierOrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
